{"version":3,"sources":["./src/app/account/register.component.html","./src/app/account/layout.component.ts","./src/app/account/layout.component.html","./src/app/account/login.component.ts","./src/app/account/account.module.ts","./src/app/account/login.component.html","./src/app/account/register.component.ts","./src/app/account/account-routing.module.ts"],"names":[],"mappings":"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","file":"account-account-module-es2015.js","sourcesContent":["export default \"<div class=\\\"card\\\">\\r\\n    <h4 class=\\\"card-header\\\">Register</h4>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"firstName\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"lastName\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"username\\\">Username</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                    <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                    Register\\r\\n                </button>\\r\\n                <a routerLink=\\\"../login\\\" class=\\\"btn btn-link\\\">Cancel</a>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\";","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n      //debugger;\r\n        // redirect to home if already logged in\r\n        if (this.accountService.userValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}\r\n","export default \"<div class=\\\"bg-gradient-primary\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n  <footer class=\\\"py-4 bg-light mt-auto\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"d-flex align-items-center justify-content-between small\\\">\\r\\n        <div class=\\\"text-muted\\\">Copyright &copy; Avante 2021</div>\\r\\n        <div><a href=\\\"#\\\">Privacy Policy &middot;</a><a href=\\\"#\\\">Terms &amp; Conditions</a></div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </footer>\\r\\n</div>\\r\\n\\r\\n\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService, NotificationService } from '../_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountService: AccountService,\r\n    private alertService: AlertService,\r\n    private notificationService: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    //debugger;\r\n\r\n    if (localStorage.getItem('user') !== null) {\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('userprofile');\r\n    }\r\n\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.accountService.login(this.f.username.value, this.f.password.value)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          // get return url from query parameters or default to home page\r\n          const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n          this.router.navigateByUrl(returnUrl);\r\n        },\r\n        error: error => {\r\n          this.notificationService.showError(error, \"Error\");\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n    AccountRoutingModule,\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        LoginComponent,\r\n      RegisterComponent\r\n    ]\r\n})\r\nexport class AccountModule { }\r\n","export default \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row justifylogin-content-center\\\">\\r\\n\\r\\n    <div class=\\\"col-xl-10 col-lg-12 col-md-9\\\">\\r\\n      <div class=\\\"card o-hidden border-0 shadow-lg my-5\\\">\\r\\n        <div class=\\\"card-body p-0\\\" style=\\\"height:76vh\\\">\\r\\n          <!-- Nested Row within Card Body -->\\r\\n          <div class=\\\"row\\\" style=\\\"height:76vh\\\">\\r\\n            <div class=\\\"col-lg-8 d-none d-lg-block bg-login-image\\\">\\r\\n             \\r\\n            </div>\\r\\n            <div class=\\\"col-lg-4\\\">\\r\\n              <div style=\\\"float:right;margin-top:20px;margin-right:10px;\\\">\\r\\n                <img src=\\\"assets/img/1_Avante_ Logo.png\\\" style=\\\"width:166px\\\" />\\r\\n              </div>\\r\\n              <br />\\r\\n              <br />\\r\\n              <br />\\r\\n              <div class=\\\"p-5\\\">\\r\\n                <div class=\\\"text-center\\\">\\r\\n                  <h1 class=\\\"h4 text-gray-900 mb-4\\\"></h1>\\r\\n                </div>\\r\\n                <form class=\\\"user\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n                  <br />\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                      <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                      Login\\r\\n                    </button>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                  </div>\\r\\n                  <!--<hr>-->\\r\\n                </form>\\r\\n\\r\\n                <div class=\\\"text-center\\\">\\r\\n                  <!--<a class=\\\"small\\\"  routerLink=\\\"../register\\\">Create an Account!</a>-->\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            username: ['', Validators.required],\r\n            password: ['', [Validators.required, Validators.minLength(6)]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }"],"sourceRoot":"webpack:///"}