{"version":3,"sources":["webpack:///src/app/account/register.component.html","webpack:///src/app/account/layout.component.ts","webpack:///src/app/account/layout.component.html","webpack:///src/app/account/login.component.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/login.component.html","webpack:///src/app/account/register.component.ts","webpack:///src/app/account/account-routing.module.ts"],"names":["LayoutComponent","router","accountService","userValue","navigate","template","LoginComponent","formBuilder","route","alertService","notificationService","loading","submitted","localStorage","getItem","removeItem","form","group","username","required","password","controls","clear","invalid","login","f","value","pipe","subscribe","next","returnUrl","snapshot","queryParams","navigateByUrl","error","showError","AccountModule","imports","declarations","RegisterComponent","firstName","lastName","minLength","register","success","keepAfterRouteChange","relativeTo","routes","path","component","children","AccountRoutingModule","forChild","exports"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["export default \"<div class=\\\"card\\\">\\r\\n    <h4 class=\\\"card-header\\\">Register</h4>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"firstName\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"lastName\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"username\\\">Username</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                    <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                    <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 6 characters</div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                    <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                    Register\\r\\n                </button>\\r\\n                <a routerLink=\\\"../login\\\" class=\\\"btn btn-link\\\">Cancel</a>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\";","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n      //debugger;\r\n        // redirect to home if already logged in\r\n        if (this.accountService.userValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}\r\n","export default \"<div class=\\\"bg-gradient-primary\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n  <footer class=\\\"py-4 bg-light mt-auto\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"d-flex align-items-center justify-content-between small\\\">\\r\\n        <div class=\\\"text-muted\\\">Copyright &copy; Avante 2021</div>\\r\\n        <div><a href=\\\"#\\\">Privacy Policy &middot;</a><a href=\\\"#\\\">Terms &amp; Conditions</a></div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </footer>\\r\\n</div>\\r\\n\\r\\n\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService, NotificationService } from '../_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountService: AccountService,\r\n    private alertService: AlertService,\r\n    private notificationService: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    //debugger;\r\n\r\n    if (localStorage.getItem('user') !== null) {\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('userprofile');\r\n    }\r\n\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.accountService.login(this.f.username.value, this.f.password.value)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: () => {\r\n          // get return url from query parameters or default to home page\r\n          const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n          this.router.navigateByUrl(returnUrl);\r\n        },\r\n        error: error => {\r\n          this.notificationService.showError(error, \"Error\");\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n    AccountRoutingModule,\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        LoginComponent,\r\n      RegisterComponent\r\n    ]\r\n})\r\nexport class AccountModule { }\r\n","export default \"<div class=\\\"container\\\">\\r\\n  <div class=\\\"row justifylogin-content-center\\\">\\r\\n\\r\\n    <div class=\\\"col-xl-10 col-lg-12 col-md-9\\\">\\r\\n      <div class=\\\"card o-hidden border-0 shadow-lg my-5\\\">\\r\\n        <div class=\\\"card-body p-0\\\" style=\\\"height:76vh\\\">\\r\\n          <!-- Nested Row within Card Body -->\\r\\n          <div class=\\\"row\\\" style=\\\"height:76vh\\\">\\r\\n            <div class=\\\"col-lg-8 d-none d-lg-block bg-login-image\\\">\\r\\n             \\r\\n            </div>\\r\\n            <div class=\\\"col-lg-4\\\">\\r\\n              <div style=\\\"float:right;margin-top:20px;margin-right:10px;\\\">\\r\\n                <img src=\\\"assets/img/1_Avante_ Logo.png\\\" style=\\\"width:166px\\\" />\\r\\n              </div>\\r\\n              <br />\\r\\n              <br />\\r\\n              <br />\\r\\n              <div class=\\\"p-5\\\">\\r\\n                <div class=\\\"text-center\\\">\\r\\n                  <h1 class=\\\"h4 text-gray-900 mb-4\\\"></h1>\\r\\n                </div>\\r\\n                <form class=\\\"user\\\" [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n                  <br />\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                      <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                      Login\\r\\n                    </button>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                  </div>\\r\\n                  <!--<hr>-->\\r\\n                </form>\\r\\n\\r\\n                <div class=\\\"text-center\\\">\\r\\n                  <!--<a class=\\\"small\\\"  routerLink=\\\"../register\\\">Create an Account!</a>-->\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            username: ['', Validators.required],\r\n            password: ['', [Validators.required, Validators.minLength(6)]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }"]}